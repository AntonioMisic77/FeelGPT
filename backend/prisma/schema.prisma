datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UsersGender {
  MALE
  FEMALE
  OTHERS
  PREFER_NOT_TO_SAY
}

model User {
  id                  String                @id @default(uuid())
  firstName           String
  lastName            String
  phoneNumber         String
  gender              UsersGender
  password            String
  avatarUrl           String                @default("https://thumbs.dreamstime.com/z/user-profile-d-icon-avatar-person-button-picture-portrait-symbol-vector-neutral-gender-silhouette-circle-photo-blank-272643248.jpg")
  isDeactivated       Boolean               @default(false)
  stories             Story[]
  storyViews          StoryView[]           @relation("viewer")
  follows             Follow[]              @relation("follower")
  followings          Follow[]              @relation("following")
  posts               Post[]
  PostLike            PostLike[]
  PostComment         PostComment[]
  CommentLike         CommentLike[]
  DeactivationRequest DeactivationRequest[]
  Reporter            ProfileReport[]       @relation("Reporter")
  Reported            ProfileReport[]       @relation("Reported")
  CommentReport       CommentReport[]
  PostReport          PostReport[]
  Vendor              Vendor?
  Consumer            Consumer?
  RootAdmin           RootAdmin?
  SubAdmin            SubAdmin?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  Notification        Notification[]
}

enum UserStoriesType {
  IMAGE
  VIDEO
}

model Story {
  id         String          @id @default(uuid())
  userId     String
  user       User            @relation(fields: [userId], references: [id])
  caption    String?
  type       UserStoriesType
  url        String
  storyViews StoryView[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
}

model StoryView {
  id        String   @id @default(uuid())
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id])
  viewerId  String
  viewer    User     @relation(name: "viewer", fields: [viewerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([storyId, viewerId])
}

model Follow {
  id           String        @id @default(uuid())
  followerId   String
  follower     User          @relation(name: "follower", fields: [followerId], references: [id])
  followingId  String
  following    User          @relation(name: "following", fields: [followingId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  Notification Notification?

  @@unique([followerId, followingId])
}

model Post {
  id           String        @id @default(uuid())
  createdBy    String
  creator      User          @relation(fields: [createdBy], references: [id])
  caption      String
  review       Review?
  postMedia    PostMedia[]
  postLikes    PostLike[]
  postComments PostComment[]
  PostReport   PostReport[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model Review {
  id            String         @id @default(uuid())
  postId        String         @unique()
  post          Post           @relation(fields: [postId], references: [id])
  businessId    String
  business      Business       @relation(fields: [businessId], references: [id])
  rating        Int            @default(0)
  itemsReviewed ItemReviewed[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model ItemReviewed {
  id         String   @id @default(uuid())
  reviewId   String
  review     Review   @relation(fields: [reviewId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  rating     Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Vendor {
  id              String           @id @default(uuid())
  cnic            String           @unique()
  userId          String           @unique()
  user            User             @relation(fields: [userId], references: [id])
  zoneId          String
  zone            Zone             @relation(fields: [zoneId], references: [id])
  business        Business?
  CreateVendorLog CreateVendorLog?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}

model Business {
  id                 String           @id @default(uuid())
  name               String
  country            String
  province           String
  city               String
  descriptiveAddress String
  phoneNumber        String?
  latitude           Decimal          @db.Decimal(9, 6)
  longitude          Decimal          @db.Decimal(9, 6)
  reviewCount        Int              @default(0)
  aggregateRating    Decimal          @default(0) @db.Decimal(2, 1)
  vendorId           String           @unique()
  vendor             Vendor           @relation(fields: [vendorId], references: [id])
  reviews            Review[]
  foodServices       FoodService[]
  paymentServices    PaymentService[]
  menuCategories     MenuCategory[]
  deals              Deal[]
  businessSocials    BusinessSocial[]
  availabilities     Availability[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
}

enum FoodServicesType {
  DINE_IN
  DELIVERY
  TAKE_AWAY
}

model FoodService {
  id         String           @id @default(uuid())
  type       FoodServicesType
  businessId String
  business   Business         @relation(fields: [businessId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
}

enum PaymentServicesType {
  CASH
  EASY_PAISA
  JAZZ_CASH
  BANK_TRANSFER
}

model PaymentService {
  id         String              @id @default(uuid())
  type       PaymentServicesType
  businessId String
  business   Business            @relation(fields: [businessId], references: [id])
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @default(now()) @updatedAt
}

model MenuCategory {
  id         String     @id @default(uuid())
  name       String
  businessId String
  business   Business   @relation(fields: [businessId], references: [id])
  menuItems  MenuItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  @@unique([businessId, name], name: "MenuCategoryName")
}

model MenuItem {
  id              String         @id @default(uuid())
  name            String
  price           Decimal        @db.Decimal(7, 2)
  description     String
  imageUrl        String
  reviewCount     Int            @default(0)
  aggregateRating Decimal        @default(0) @db.Decimal(2, 1)
  isArchived      Boolean        @default(false)
  menuCategoryId  String
  menuCategory    MenuCategory   @relation(fields: [menuCategoryId], references: [id])
  itemsReviewed   ItemReviewed[]
  dealItems       DealItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt

  @@unique([menuCategoryId, name], name: "MenuItemName")
}

model Deal {
  id          String     @id @default(uuid())
  name        String
  businessId  String
  business    Business   @relation(fields: [businessId], references: [id])
  price       Decimal    @db.Decimal(7, 2)
  description String
  imageUrl    String
  dealItems   DealItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt

  @@unique([businessId, name], name: "DealName")
}

model DealItem {
  id         String   @id @default(uuid())
  dealId     String
  deal       Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum BusinessSocialsType {
  FACEBOOK
  INSTAGRAM
  TIKTOK
  FOODPANDA
}

model BusinessSocial {
  id           String              @id @default(uuid())
  type         BusinessSocialsType
  url          String
  socialHandle String
  businessId   String
  business     Business            @relation(fields: [businessId], references: [id])
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
}

enum AvailabilitiesDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Availability {
  id         String            @id @default(uuid())
  day        AvailabilitiesDay
  opensAt    String
  closesAt   String
  businessId String
  business   Business          @relation(fields: [businessId], references: [id])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now()) @updatedAt
}

enum PostMediaType {
  IMAGE
  VIDEO
}

model PostMedia {
  id        String        @id @default(uuid())
  postId    String
  post      Post          @relation(fields: [postId], references: [id])
  url       String
  type      PostMediaType
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
}

model PostLike {
  id           String        @id @default(uuid())
  postId       String
  post         Post          @relation(fields: [postId], references: [id])
  likedBy      String
  user         User          @relation(fields: [likedBy], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  Notification Notification?

  @@unique([postId, likedBy], name: "PostLikeUnique")
}

model PostComment {
  id            String          @id @default(uuid())
  postId        String
  post          Post            @relation(fields: [postId], references: [id])
  commentedBy   String
  user          User            @relation(fields: [commentedBy], references: [id])
  content       String
  CommentLike   CommentLike[]
  CommentReport CommentReport[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Notification  Notification?
}

model CommentLike {
  id        String      @id @default(uuid())
  commentId String
  comment   PostComment @relation(fields: [commentId], references: [id])
  likedBy   String
  user      User        @relation(fields: [likedBy], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  @@unique([commentId, likedBy], name: "CommentLikeUnique")
}

model Consumer {
  id        String   @id @default(uuid())
  username  String
  email     String
  bio       String   @default("")
  userId    String   @unique()
  user      User     @relation(fields: [userId], references: [id])
  managedBy String
  subAdmin  SubAdmin @relation(fields: [managedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model RootAdmin {
  id        String     @id @default(uuid())
  userId    String     @unique()
  email     String     @unique()
  user      User       @relation(fields: [userId], references: [id])
  SubAdmin  SubAdmin[]
  Zone      Zone[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model SubAdmin {
  id                  String                @id @default(uuid())
  email               String
  managedBy           String
  rootAdmin           RootAdmin             @relation(fields: [managedBy], references: [id])
  userId              String                @unique()
  user                User                  @relation(fields: [userId], references: [id])
  zones               Zone[]
  consumers           Consumer[]
  DeactivationRequest DeactivationRequest[]
  CreateVendorLog     CreateVendorLog[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
}

model Zone {
  id         String    @id @default(uuid())
  name       String
  assignedTo String
  subAdmin   SubAdmin  @relation(fields: [assignedTo], references: [id])
  createdBy  String
  rootAdmin  RootAdmin @relation(fields: [createdBy], references: [id])
  vendors    Vendor[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

enum RequestsStatus {
  APPROVED
  DENIED
  PENDING
}

model DeactivationRequest {
  id               String         @id @default(uuid())
  requestedBy      String
  subAdmin         SubAdmin       @relation(fields: [requestedBy], references: [id])
  requestedAgainst String
  user             User           @relation(fields: [requestedAgainst], references: [id])
  remarks          String
  status           RequestsStatus
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
}

model CreateVendorLog {
  id         String         @id @default(uuid())
  createdBy  String
  subAdmin   SubAdmin       @relation(fields: [createdBy], references: [id])
  createdFor String         @unique()
  vendor     Vendor         @relation(fields: [createdFor], references: [id])
  remarks    String
  status     RequestsStatus
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now()) @updatedAt
}

model ProfileReport {
  id              String   @id @default(uuid())
  reportedBy      String
  reporter        User     @relation("Reporter", fields: [reportedBy], references: [id])
  reportedAgainst String
  reportedUser    User     @relation("Reported", fields: [reportedAgainst], references: [id])
  reason          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

model CommentReport {
  id              String      @id @default(uuid())
  reportedBy      String
  reporter        User        @relation(fields: [reportedBy], references: [id])
  reportedAgainst String
  reportedComment PostComment @relation(fields: [reportedAgainst], references: [id])
  reason          String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
}

model PostReport {
  id              String   @id @default(uuid())
  reportedBy      String
  reporter        User     @relation(fields: [reportedBy], references: [id])
  reportedAgainst String
  reportedPost    Post     @relation(fields: [reportedAgainst], references: [id])
  reason          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

enum NotificationTypeEnum {
  FOLLOWED
  POST_LIKE
  POST_COMMENT
}

model Notification {
  id            Int                  @id @default(autoincrement())
  userId        String
  type          NotificationTypeEnum
  followed      Follow?              @relation(fields: [followedId], references: [id], onDelete: Cascade)
  followedId    String?              @unique()
  postLike      PostLike?            @relation(fields: [postLikeId], references: [id], onDelete: Cascade)
  postLikeId    String?              @unique()
  postComment   PostComment?         @relation(fields: [postCommentId], references: [id])
  postCommentId String?              @unique()
  user          User                 @relation(fields: [userId], references: [id])
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now()) @updatedAt
}
